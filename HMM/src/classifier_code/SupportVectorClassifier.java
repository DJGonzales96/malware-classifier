package classifier_code;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import be.cylab.java.roc.Roc;
import libsvm.*;

public class SupportVectorClassifier {
	static int UNIQUE_SYMBOLS = 15;
	static int NUM_STATES = 2;
	static int DIMENSIONS = 3;
	final static int T = 50000;
	final static int TEST_SIZE = 50;

	public static void main(String[] args) throws IOException {
		File winDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\winwebsec");
		File zbotDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\zbot");
		File zeroaccessDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\zeroaccess");
		
		Sequencer winSeq = new Sequencer(UNIQUE_SYMBOLS, winDirectory);
		Sequencer zbotSeq = new Sequencer(UNIQUE_SYMBOLS, zbotDirectory);
		Sequencer zeroSeq = new Sequencer(UNIQUE_SYMBOLS, zeroaccessDirectory);
		List<Sequencer> seqs = new ArrayList<Sequencer>() {
			{
				add(winSeq);
				add(zbotSeq);
				add(zeroSeq);
			}
		};
		
		winSeq.processSupportVectorTrainingData(new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\winwebsec\\winwebsec_train"), DIMENSIONS);
		zbotSeq.processSupportVectorTrainingData(new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zbot\\zbot_train"), DIMENSIONS);
		zeroSeq.processSupportVectorTrainingData(new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zeroaccess\\zeroaccess_train"), DIMENSIONS);
		
		// Stack 3 HM models per malware family
		List<Model> winwebsecModels = new ArrayList<>();
		List<Model> zbotModels = new ArrayList<>();
		List<Model> zeroaccessModels = new ArrayList<>();
		for(int i=0 ;i<DIMENSIONS; i++) {
			winwebsecModels.add(new Model());
			zbotModels.add(new Model());
			zeroaccessModels.add(new Model());
		}
		
		File winTrainDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\winwebsec\\winwebsec_svm_train");
		File zbotTrainDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zbot\\zbot_svm_train");
		File zeroTrainDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zeroaccess\\zeroaccess_svm_train");
		File[] trainingFiles;
		
		// Train HM models for each family
		trainingFiles = winTrainDirectory.listFiles();
		for(int i=0; i<trainingFiles.length; i++) {
			int[] winTrainingSeq = winSeq.getTrainingSequence(T, trainingFiles[i]);
			winwebsecModels.get(i).trainHMM(winTrainingSeq, UNIQUE_SYMBOLS, NUM_STATES);
		}
		trainingFiles = zbotTrainDirectory.listFiles();
		for(int i=0; i<trainingFiles.length; i++) {
			int[] zbotTrainingSeq = zbotSeq.getTrainingSequence(T, trainingFiles[i]);
			zbotModels.get(i).trainHMM(zbotTrainingSeq, UNIQUE_SYMBOLS, NUM_STATES);
		}
		trainingFiles = zeroTrainDirectory.listFiles();
		for(int i=0; i<trainingFiles.length; i++) {
			int[] zeroTrainingSeq = zeroSeq.getTrainingSequence(T, trainingFiles[i]);
			zeroaccessModels.get(i).trainHMM(zeroTrainingSeq, UNIQUE_SYMBOLS, NUM_STATES);
		}
		
		File winScoreDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\winwebsec\\winwebsec_svm_scores");
		File zbotScoreDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zbot\\zbot_svm_scores");
		File zeroScoreDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zeroaccess\\zeroaccess_svm_scores");
		File[] scoringFiles;
		svm_node[][] featureVectors;
		
		System.out.println("Training SVM models...");
		// Build Support Vector Classifiers
		scoringFiles = winScoreDirectory.listFiles();
		featureVectors = new svm_node[scoringFiles.length][DIMENSIONS];
		for(int i=0; i < scoringFiles.length; i++) {
			int[] scoreSequence = winSeq.getTrainingSequence(T, scoringFiles[i]);
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<DIMENSIONS; j++) 
				c_scores[j] = winwebsecModels.get(j).score(scoreSequence);
			featureVectors[i] = SVM.buildVector(c_scores);
		}
		svm_model winwebsecClassifier = SVM.buildModel(featureVectors);
		
		scoringFiles = zbotScoreDirectory.listFiles();
		featureVectors = new svm_node[scoringFiles.length][DIMENSIONS];
		for(int i=0; i < scoringFiles.length; i++) {
			int[] scoreSequence = zbotSeq.getTrainingSequence(T, scoringFiles[i]);
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<DIMENSIONS; j++) 
				c_scores[j] = zbotModels.get(j).score(scoreSequence);
			featureVectors[i] = SVM.buildVector(c_scores);
		}
		svm_model zbotClassifier = SVM.buildModel(featureVectors);
		
		scoringFiles = zeroScoreDirectory.listFiles();
		featureVectors = new svm_node[scoringFiles.length][DIMENSIONS];
		for(int i=0; i < scoringFiles.length; i++) {
			int[] scoreSequence = zeroSeq.getTrainingSequence(T, scoringFiles[i]);
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<DIMENSIONS; j++) 
				c_scores[j] = zeroaccessModels.get(j).score(scoreSequence);
			featureVectors[i] = SVM.buildVector(c_scores);
		}
		svm_model zeroaccessClassifier = SVM.buildModel(featureVectors);
		System.out.println("DONE.");
		
		// Prep data for testing SVM models
		File winTestDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\winwebsec\\winwebsec_test");
		File zbotTestDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zbot\\zbot_test");
		File zeroaccessTestDirectory = new File("C:\\Users\\djgon\\git\\MalwareClassifier\\HMM\\data\\zeroaccess\\zeroaccess_test");
		List<File> testDirs = new ArrayList<File>() {
			{
				add(winTestDirectory);
				add(zbotTestDirectory);
				add(zeroaccessTestDirectory);
			}
		};
		// Evaluate SVM models using AUC
		classifyWinwebsec(testDirs, winwebsecModels, winwebsecClassifier, seqs);
		classifyZbot(testDirs, zbotModels, zbotClassifier, seqs);
		classifyZbot(testDirs, zeroaccessModels, zeroaccessClassifier, seqs);
	}
	
	public static void classifyWinwebsec(List<File> testDirectories, List<Model> models, svm_model svc, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
		File[] testingFiles;
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nWinwebsec vs Zbot: ");
		scores = new double[100];
		labels = new boolean[100];
		int end;
		indx = 0;
		
		testingFiles = winTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = winSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = zbotTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = zbotSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		System.out.println("\nWinwebsec vs ZeroAccess: ");
		scores = new double[100];
		labels = new boolean[100];
		indx = 0;
		
		testingFiles = winTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = winSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = zeroTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = zeroSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}
	
	public static void classifyZbot(List<File> testDirectories, List<Model> models, svm_model svc, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
		File[] testingFiles;
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nZbot vs Winwebsec: ");
		scores = new double[100];
		labels = new boolean[100];
		int end;
		indx = 0;
		
		testingFiles = zbotTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = zbotSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = winTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = winSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		System.out.println("\nZbot vs ZeroAccess: ");
		scores = new double[100];
		labels = new boolean[100];
		indx = 0;
		
		testingFiles = zbotTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = zbotSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = zeroTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = zeroSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}

	public static void classifyZeroAccess(List<File> testDirectories, List<Model> models, svm_model svc, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
		File[] testingFiles;
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nZeroAccess vs Winwebsec: ");
		scores = new double[100];
		labels = new boolean[100];
		int end;
		indx = 0;
		
		testingFiles = zeroTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = zeroSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = winTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = winSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		System.out.println("\nZeroAccess vs Zbot: ");
		scores = new double[100];
		labels = new boolean[100];
		indx = 0;
		
		testingFiles = zeroTestDirectory.listFiles();
		for(int i=0; i<TEST_SIZE; i++) {
			int[] testSequence = zeroSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = true;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
			indx++;
		}
		
		end = TEST_SIZE+TEST_SIZE-1;
		testingFiles = zbotTestDirectory.listFiles();
		for(int i=indx; i<end; i++) {
			int[] testSequence = zbotSeq.getTestingSequence(T, testingFiles[i]);
			
			double[] c_scores = new double[DIMENSIONS];
			for(int j = 0; j<models.size(); j++) 
				c_scores[j] = models.get(j).score(testSequence);
			svm_node[] vector = SVM.buildVector(c_scores);
			
			boolean true_alert = false;
			scores[i] = SVM.predict(svc, vector);
			labels[i] = true_alert;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			if(scores[i]/sum >= 0 && scores[i]/sum <= 1)
				scores[i] = scores[i] / sum;
			else
				scores[i] = scores[i-1];
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}
	
}
