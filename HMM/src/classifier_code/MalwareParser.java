package classifier_code;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import static java.util.stream.Collectors.*;

public class MalwareParser {
	int[] symbols = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};

	public <T> void logValues(Map<String, T> data) {
		System.out.println(Arrays.toString(data.entrySet().toArray()));
	}

	public Map<String, Integer> opCounter(File malwareFamily) throws FileNotFoundException {
		System.out.println("Building dictionary: " + malwareFamily.toString());
		Map<String, Integer> frequency = new HashMap<>();

		File[] datasets = malwareFamily.listFiles();
		if (datasets != null) {
			for (File set : datasets) {
				// System.out.println("\tFile: " + set.toString()); DEBUG
				Scanner reader = new Scanner(set);
				while (reader.hasNextLine()) {
					String opcode = reader.nextLine();

					if (!frequency.containsKey(opcode))
						frequency.put(opcode, 1);
					else
						frequency.put(opcode, frequency.get(opcode) + 1);
				}
				reader.close();
			}
		}


		// Sort frequency map by value, descending
		Map<String, Integer> sortedFrequencies = frequency.entrySet().stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		logValues(sortedFrequencies);
		return sortedFrequencies;
	}

	public Map<String, String> buildDictionary(int N, File malwareFamily) throws FileNotFoundException {
		Map<String, Integer> frequencies = opCounter(malwareFamily);
		Map<String, String> dictionary = new HashMap<>();

		int index = 0;
		for (String opcode : frequencies.keySet()) {
			int token;
			if (index < N - 1)
				token = index++;
			else
				token = index;
			dictionary.put(opcode, String.valueOf(token));
		}
		logValues(dictionary);
		return dictionary;
	}

	public void tokenize(int N, File malwareFamily) throws IOException {
		System.out.println("\tFile: " + malwareFamily.toString() + "...");
		Map<String, String> dictionary = buildDictionary(N, malwareFamily);

		File[] datasets = malwareFamily.listFiles();
		if (datasets != null) {
			for (File set : datasets) {

				String filename = set.toString() + "_data.txt";
				File tokenizedOpcodes = new File(filename);
				tokenizedOpcodes.createNewFile();
				FileWriter out = new FileWriter(tokenizedOpcodes);

				File[] files = set.listFiles();
				if (files != null) {
					for (File file : files) {
						Scanner reader = new Scanner(file);
						while (reader.hasNextLine()) {
							String opcode = reader.nextLine();
							String token = dictionary.get(opcode);
							out.write(token);
							out.flush();
						}
						// reader.close();
					}
					out.close();
				}
			}
		}
		System.out.println("\tDone.");
	}

	public void parse(int N, File allFamiliesDir) throws IOException {
		System.out.println("Parsing malware code...");

		File[] malFiles = allFamiliesDir.listFiles();
		for (File family : malFiles)
			tokenize(N, family);// tokenizes each family

		System.out.println("Successful parse.");
	}

	public static void splitTrainingAndTestSets(File dir, String to) throws IOException {
		File[] signatures = dir.listFiles();

		for (int i = 0; i < 1000; i++) {
			Path from = signatures[i].toPath();
			if (i < 900) {
				Path dest = Paths.get(to + "_train\\trainFile" + Integer.toString(i) + ".asm.txt");
				Files.createDirectories(dest.getParent());
				Files.copy(from, dest);
			} else {
				Path dest = Paths.get(to + "_test\\testFile" + Integer.toString(i) + ".asm.txt");
				Files.createDirectories(dest.getParent());
				Files.copy(from, dest);
			}
		}
	}

	/*
	 * public static void main(String args[]) throws IOException { File winDirectory
	 * = new File("C:\\Users\\djgon\\Desktop\\opcodes\\winwebsec"); File
	 * zbotDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\zbot"); File
	 * zeroaccessDirectory = new
	 * File("C:\\Users\\djgon\\Desktop\\opcodes\\zeroaccess");
	 * 
	 * splitTrainingAndTestSets(winDirectory,
	 * "C:\\Users\\djgon\\projects\\HMM\\data\\winwebsec");
	 * splitTrainingAndTestSets(zbotDirectory,
	 * "C:\\Users\\djgon\\projects\\HMM\\data\\zbot");
	 * splitTrainingAndTestSets(zeroaccessDirectory,
	 * "C:\\Users\\djgon\\projects\\HMM\\data\\zeroaccess"); }
	 */
}
