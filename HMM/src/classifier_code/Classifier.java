package classifier_code;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import be.cylab.java.roc.Roc;

public class Classifier {
	static int UNIQUE_SYMBOLS = 15;
	static int NUM_STATES = 2;
	final static int T = 50000;
	
		
	public static void main(String[] args) throws IOException {		
		File winDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\winwebsec");
		File zbotDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\zbot");
		File zeroaccessDirectory = new File("C:\\Users\\djgon\\Desktop\\opcodes\\zeroaccess");
		
		Sequencer winSeq = new Sequencer(UNIQUE_SYMBOLS, winDirectory);
		Sequencer zbotSeq = new Sequencer(UNIQUE_SYMBOLS, zbotDirectory);
		Sequencer zeroSeq = new Sequencer(UNIQUE_SYMBOLS, zeroaccessDirectory);
		List<Sequencer> seqs = new ArrayList<Sequencer>() {
			{
				add(winSeq);
				add(zbotSeq);
				add(zeroSeq);
			}
		};
		
		winSeq.processData(new File("C:\\Users\\djgon\\projects\\HMM\\data\\winwebsec"));
		zbotSeq.processData(new File("C:\\Users\\djgon\\projects\\HMM\\data\\zbot"));
		zeroSeq.processData(new File("C:\\Users\\djgon\\projects\\HMM\\data\\zeroaccess"));
		
		File winTrainDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\winwebsec\\winwebsec_train_data.txt");
		File zbotTrainDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\zbot\\zbot_train_data.txt");
		File zeroaccessTrainDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\zeroaccess\\zeroaccess_train_data.txt");
		
		int[] winTrainingData = winSeq.getTrainingSequence(T, winTrainDirectory);
		int[] zbotTrainingData = zbotSeq.getTrainingSequence(T, zbotTrainDirectory);
		int[] zeroTrainingData = zeroSeq.getTrainingSequence(T, zeroaccessTrainDirectory);
		
		Model winwebsec = new Model(); 
		Model zbot = new Model();
		Model zeroaccess = new Model();
		List<Model> models = new ArrayList<Model>() {
			{
				add(winwebsec);
				add(zbot);
				add(zeroaccess);
			}
		};
		
		winwebsec.trainHMM(winTrainingData, UNIQUE_SYMBOLS, NUM_STATES);
		zbot.trainHMM(zbotTrainingData, UNIQUE_SYMBOLS, NUM_STATES);
		zeroaccess.trainHMM(zeroTrainingData, UNIQUE_SYMBOLS, NUM_STATES);
		
		File winTestDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\winwebsec\\winwebsec_test");
		File zbotTestDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\zbot\\zbot_test");
		File zeroaccessTestDirectory = new File("C:\\Users\\djgon\\projects\\HMM\\data\\zeroaccess\\zeroaccess_test");
		List<File> testDirs = new ArrayList<File>() {
			{
				add(winTestDirectory);
				add(zbotTestDirectory);
				add(zeroaccessTestDirectory);
			}
		};
		
		classifyWinwebsec(testDirs, models, seqs);
		classifyZbot(testDirs, models, seqs);
		classifyZeroAccess(testDirs, models, seqs);
		
	}
	
	public static void classifyWinwebsec(List<File> testDirectories, List<Model> models, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
		
		Model winwebsec = models.get(0);
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nWinwebsec vs Zbot: ");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File winTest : winTestDirectory.listFiles()) {
			int[] testSequence = winSeq.getTestingSequence(T, winTest);
			double score = winwebsec.score(testSequence);
			boolean true_alert = true;
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zbotTest : zbotTestDirectory.listFiles()) {
			int[] testSequence = zbotSeq.getTestingSequence(T, zbotTest);
			double score = winwebsec.score(testSequence);
			boolean true_alert = false;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		System.out.println("\nWinwebsec vs Zeroaccess: ");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File winTest : winTestDirectory.listFiles()) {
			int[] testSequence = winSeq.getTestingSequence(T, winTest);
			double score = winwebsec.score(testSequence);
			boolean true_alert = true;
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zeroTest : zeroTestDirectory.listFiles()) {
			int[] testSequence = zeroSeq.getTestingSequence(T, zeroTest);
			double score = winwebsec.score(testSequence);
			boolean true_alert = false;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}
	
	public static void classifyZbot(List<File> testDirectories, List<Model> models, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
		
		Model zbot = models.get(1);
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nZbot vs Winwebsec: ");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File winTest : winTestDirectory.listFiles()) {
			int[] testSequence = winSeq.getTestingSequence(T, winTest);
			double score = zbot.score(testSequence);
			boolean true_alert = false;
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zbotTest : zbotTestDirectory.listFiles()) {
			int[] testSequence = zbotSeq.getTestingSequence(T, zbotTest);
			double score = zbot.score(testSequence);
			boolean true_alert = true;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		System.out.println("\nZbot vs Zeroaccess: ");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File zbotTest : zbotTestDirectory.listFiles()) {
			int[] testSequence = zbotSeq.getTestingSequence(T, zbotTest);
			double score = zbot.score(testSequence);
			boolean true_alert = true;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zeroTest : zeroTestDirectory.listFiles()) {
			int[] testSequence = zeroSeq.getTestingSequence(T, zeroTest);
			double score = zbot.score(testSequence);
			boolean true_alert = false;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}
	
	public static void classifyZeroAccess(List<File> testDirectories, List<Model> models, List<Sequencer> seqs) throws FileNotFoundException {
		double[] scores;
		boolean[] labels;
		int indx;
		double sum;
		Roc roc;
		
		File winTestDirectory = testDirectories.get(0);
		File zbotTestDirectory = testDirectories.get(1);
		File zeroTestDirectory = testDirectories.get(2);
	
		Model zeroaccess = models.get(2);
		
		Sequencer winSeq = seqs.get(0);
		Sequencer zbotSeq = seqs.get(1);
		Sequencer zeroSeq = seqs.get(2);
		
		System.out.println("\nZeroAccess vs Zbot:");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File zeroTest : zeroTestDirectory.listFiles()) {
			int[] testSequence = zeroSeq.getTestingSequence(T, zeroTest);
			double score = zeroaccess.score(testSequence);
			boolean true_alert = true;
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zbotTest : zbotTestDirectory.listFiles()) {
			int[] testSequence = zbotSeq.getTestingSequence(T, zbotTest);
			double score = zeroaccess.score(testSequence);
			boolean true_alert = false;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		//////////////////////
		/// ----- VS ----- /// 
		//////////////////////
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
		
		System.out.println("\nZeroAccess vs Winwebsec:");
		scores = new double[200];
		labels = new boolean[200];
		indx = 0;
		
		for(File winTest : winTestDirectory.listFiles()) {
			int[] testSequence = winSeq.getTestingSequence(T, winTest);
			double score = zeroaccess.score(testSequence);
			boolean true_alert = false;
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		for(File zeroTest : zeroTestDirectory.listFiles()) {
			int[] testSequence = zeroSeq.getTestingSequence(T, zeroTest);
			double score = zeroaccess.score(testSequence);
			boolean true_alert = true;
			
			scores[indx] = score;
			labels[indx] = true_alert;
			indx++;
		}
		
		// Normalize the scores
		sum = 0;
		for(int i=0; i<scores.length; i++) 
			sum += scores[i];
		for(int i=0; i<scores.length; i++) {
			scores[i] = scores[i] / sum;
		}
		
		roc = new Roc(scores, labels);
		System.out.print("AUC = " + roc.computeAUC());
	}

}
