package classifier_code;

import java.io.*;
import java.util.*;
import java.util.regex.Pattern;

public class TextParser {

	static final char[] symbols = // aka observations
			{ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
					'v', 'w', 'x', 'y', 'z', ' ' };
	Map<String, Integer> alphaNumeric;

	public TextParser() {
		alphaNumeric = buildMap();
	}

	public Map<String, Integer> buildMap() {
		Map<String, Integer> alphaNumeric = new HashMap<>();

		for (int i = 0; i < symbols.length; i++)
			alphaNumeric.put(Character.toString(symbols[i]), i);

		return alphaNumeric;
	}

	public Integer toNumeric(String token) {
		return alphaNumeric.get(token);
	}

	public void convertToAlphanumeric(int N, File toParse, String filename) {
		File newFile = new File(filename);

		try {
			newFile.createNewFile();
			Scanner in = new Scanner(toParse);
			FileWriter out = new FileWriter(newFile);
			int num_observations = 0;
			while (in.hasNextLine()) {
				if (num_observations > 50000)
					break;

				char[] line = in.nextLine().toCharArray();
				for(int i=0; i<line.length; i++) {
					String token = Character.toString(line[i]);
					String toWrite = toNumeric(token).toString();
					out.write(toWrite + '\n');
					num_observations++;
					}
				
			}
			out.flush();
			out.close();
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String args[]) {
		final int NUM_OBSERVATIONS = 50000;
		TextParser tokenizer = new TextParser();
		File clean_corpus = new File("clean_corpus.txt");
		tokenizer.convertToAlphanumeric(NUM_OBSERVATIONS, clean_corpus, "tokenized_corpus.txt");
	}
}
